This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.cargo/
  config
src/
  editor.rs
  lib.rs
xtask/
  src/
    main.rs
  Cargo.toml
.gitignore
bundler.toml
Cargo.toml
README.md
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".cargo/config">
[alias]
xtask = "run --package xtask --release --"
</file>

<file path="src/editor.rs">
use nih_plug::editor::Editor;
use nih_plug_vizia::vizia::prelude::*;
use nih_plug_vizia::widgets::{ParamSlider, ResizeHandle};
use nih_plug_vizia::{create_vizia_editor, ViziaState, ViziaTheming};
use std::sync::Arc;

use crate::HrtfConvParams;

#[derive(Lens)]
struct Data {
    params: Arc<HrtfConvParams>,
}

impl Model for Data {}

pub(crate) fn default_state() -> Arc<ViziaState> {
    ViziaState::new(|| (200, 150))
}

pub(crate) fn create(
    params: Arc<HrtfConvParams>,
    editor_state: Arc<ViziaState>,
) -> Option<Box<dyn Editor>> {
    create_vizia_editor(editor_state, ViziaTheming::default(), move |cx, _| {
        Data {
            params: params.clone(),
        }
        .build(cx);

        VStack::new(cx, |cx| {
            Label::new(cx, "Gain GUI")
                .font_weight(FontWeightKeyword::Thin)
                .font_size(30.0)
                .height(Pixels(50.0))
                .child_top(Stretch(1.0))
                .child_bottom(Pixels(0.0));
            Label::new(cx, "Gain");
            ParamSlider::new(cx, Data::params, |params| &params.gain);
        })
        .row_between(Pixels(0.0))
        .child_left(Stretch(1.0))
        .child_right(Pixels(1.0));
        ResizeHandle::new(cx);
    })
}
</file>

<file path="src/lib.rs">
use nih_plug::prelude::*;
use nih_plug_vizia::ViziaState;
use sofar::{
    reader::{Filter, OpenOptions, Sofar},
    render::Renderer,
};
use std::sync::Arc;
mod editor;

const PARTITION_LEN: usize = 64;

// parameters and gui state
#[derive(Params)]
struct HrtfConvParams {
    #[persist = "editor-state"]
    editor_state: Arc<ViziaState>,
    #[id = "gain"]
    pub gain: FloatParam,
}

// plugin struct
struct HrtfConv {
    params: Arc<HrtfConvParams>,
    sofa: Option<Sofar>,
    filter: Option<Filter>,
    renderer: Option<Renderer>,
    scratch_buffer: Vec<f32>,
}

impl Default for HrtfConv {
    // constructor
    fn default() -> Self {
        Self {
            params: Arc::new(HrtfConvParams::default()),
            sofa: None,
            filter: None,
            renderer: None,
            scratch_buffer: vec![],
        }
    }
}

impl Default for HrtfConvParams {
    fn default() -> Self {
        Self {
            editor_state: editor::default_state(),
            // This gain is stored as linear gain. NIH-plug comes with useful conversion functions
            // to treat these kinds of parameters as if we were dealing with decibels. Storing this
            // as decibels is easier to work with, but requires a conversion for every sample.
            gain: FloatParam::new(
                "Gain",
                util::db_to_gain(0.0),
                FloatRange::Skewed {
                    min: util::db_to_gain(-30.0),
                    max: util::db_to_gain(30.0),
                    // This makes the range appear as if it was linear when displaying the values as
                    // decibels
                    factor: FloatRange::gain_skew_factor(-30.0, 30.0),
                },
            )
            // Because the gain parameter is stored as linear gain instead of storing the value as
            // decibels, we need logarithmic smoothing
            .with_smoother(SmoothingStyle::Logarithmic(50.0))
            .with_unit(" dB")
            // There are many predefined formatters we can use here. If the gain was stored as
            // decibels instead of as a linear gain value, we could have also used the
            // `.with_step_size(0.1)` function to get internal rounding.
            .with_value_to_string(formatters::v2s_f32_gain_to_db(2))
            .with_string_to_value(formatters::s2v_f32_gain_to_db()),
        }
    }
}

impl Plugin for HrtfConv {
    const NAME: &'static str = "Hrtf Conv";
    const VENDOR: &'static str = "ph3nac";
    const URL: &'static str = env!("CARGO_PKG_HOMEPAGE");
    const EMAIL: &'static str = "ph3nac@gmail.com";

    const VERSION: &'static str = env!("CARGO_PKG_VERSION");

    // The first audio IO layout is used as the default. The other layouts may be selected either
    // explicitly or automatically by the host or the user depending on the plugin API/backend.
    const AUDIO_IO_LAYOUTS: &'static [AudioIOLayout] = &[AudioIOLayout {
        main_input_channels: NonZeroU32::new(1),
        main_output_channels: NonZeroU32::new(2),

        aux_input_ports: &[],
        aux_output_ports: &[],

        // Individual ports and the layout as a whole can be named here. By default these names
        // are generated as needed. This layout will be called 'Stereo', while a layout with
        // only one input and output channel would be called 'Mono'.
        names: PortNames::const_default(),
    }];

    const MIDI_INPUT: MidiConfig = MidiConfig::None;
    const MIDI_OUTPUT: MidiConfig = MidiConfig::None;

    const SAMPLE_ACCURATE_AUTOMATION: bool = true;

    // If the plugin can send or receive SysEx messages, it can define a type to wrap around those
    // messages here. The type implements the `SysExMessage` trait, which allows conversion to and
    // from plain byte buffers.
    type SysExMessage = ();
    // More advanced plugins can use this to run expensive background tasks. See the field's
    // documentation for more information. `()` means that the plugin does not have any background
    // tasks.
    type BackgroundTask = ();

    fn params(&self) -> Arc<dyn Params> {
        self.params.clone()
    }

    fn editor(&mut self, _async_executor: AsyncExecutor<Self>) -> Option<Box<dyn Editor>> {
        editor::create(self.params.clone(), self.params.editor_state.clone())
    }

    fn initialize(
        &mut self,
        _audio_io_layout: &AudioIOLayout,
        buffer_config: &BufferConfig,
        _context: &mut impl InitContext<Self>,
    ) -> bool {
        let sofa_path = "assets/mit_kemar_normal_pinna.sofa";
        let sofa = OpenOptions::new()
            .sample_rate(buffer_config.sample_rate)
            .open(sofa_path);
        if sofa.is_err() {
            nih_error!("Failed to open SOFA file: {}", sofa_path);
        }
        let sofa = sofa.unwrap();

        let filter_len = sofa.filter_len();
        let mut filter = Filter::new(filter_len);
        sofa.filter(0.0, 1.0, 0.0, &mut filter);

        let render = Renderer::builder(filter_len)
            .with_sample_rate(buffer_config.sample_rate)
            .with_partition_len(PARTITION_LEN)
            .build();
        if render.is_err() {
            nih_error!("Failed to create HRTF renderer");
        }
        let mut render = render.unwrap();

        render.set_filter(&filter).expect("Failed to set filter");

        self.sofa = Some(sofa);
        self.filter = Some(filter);
        self.renderer = Some(render);

        self.scratch_buffer.clear();
        self.scratch_buffer
            .resize(buffer_config.max_buffer_size as usize, 0.0);

        // Resize buffers and perform other potentially expensive initialization operations here.
        // The `reset()` function is always called right after this function. You can remove this
        // function if you do not need it.
        true
    }

    fn reset(&mut self) {
        // Reset buffers and envelopes here. This can be called from the audio thread and may not
        // allocate. You can remove this function if you do not need it.
    }

    fn process(
        &mut self,
        buffer: &mut Buffer,
        _aux: &mut AuxiliaryBuffers,
        _context: &mut impl ProcessContext<Self>,
    ) -> ProcessStatus {
        let render = match &mut self.renderer {
            Some(r) => r,
            None => return ProcessStatus::Normal,
        };

        let num_samples = buffer.samples();
        let channels = buffer.as_slice();
        let num_channels = channels.len();

        if num_channels < 2 || num_samples == 0 {
            return ProcessStatus::Normal;
        }

        // no allocation here
        self.scratch_buffer.clear();
        self.scratch_buffer.extend_from_slice(channels[0]);

        let (left_chan, right_chan) = channels.split_at_mut(1);
        let left_out = &mut left_chan[0][..num_samples];
        let right_out = &mut right_chan[1][..num_samples];

        if let Err(e) = render.process_block(&self.scratch_buffer, left_out, right_out) {
            nih_error!("HRTF render error:{}", e);
            return ProcessStatus::Error("HRTF processing failed");
        }

        ProcessStatus::Normal
    }
}

impl ClapPlugin for HrtfConv {
    const CLAP_ID: &'static str = "com.ph3nac.hrtf-conv";
    const CLAP_DESCRIPTION: Option<&'static str> = Some("A short description of your plugin");
    const CLAP_MANUAL_URL: Option<&'static str> = Some(Self::URL);
    const CLAP_SUPPORT_URL: Option<&'static str> = None;

    // Don't forget to change these features
    const CLAP_FEATURES: &'static [ClapFeature] = &[ClapFeature::AudioEffect, ClapFeature::Stereo];
}

impl Vst3Plugin for HrtfConv {
    const VST3_CLASS_ID: [u8; 16] = *b"Exactly16Chars!!";

    // And also don't forget to change these categories
    const VST3_SUBCATEGORIES: &'static [Vst3SubCategory] =
        &[Vst3SubCategory::Fx, Vst3SubCategory::Dynamics];
}

nih_export_clap!(HrtfConv);
nih_export_vst3!(HrtfConv);
</file>

<file path="xtask/src/main.rs">
fn main() -> nih_plug_xtask::Result<()> {
    nih_plug_xtask::main()
}
</file>

<file path="xtask/Cargo.toml">
[package]
name = "xtask"
version = "0.1.0"
edition = "2021"

[dependencies]
nih_plug_xtask = { git = "https://github.com/robbert-vdh/nih-plug.git" }
</file>

<file path=".gitignore">
/target
</file>

<file path="bundler.toml">
# This provides metadata for NIH-plug's `cargo xtask bundle <foo>` plugin
# bundler. This file's syntax is as follows:
#
# [package_name]
# name = "Human Readable Plugin Name"  # defaults to <package_name>

[hrtf_conv]
name = "Hrtf Conv"
</file>

<file path="Cargo.toml">
[package]
name = "hrtf_conv"
version = "0.1.0"
edition = "2021"
authors = ["ph3nac <ph3nac@gmail.com>"]
license = "GPL-3.0-or-later"
homepage = "ph3nac.com"
description = "A short description of your plugin"

[workspace]
members = ["xtask"]

[lib]
crate-type = ["cdylib"]

[dependencies]
# Remove the `assert_process_allocs` feature to allow allocations on the audio
# thread in debug builds.
nih_plug = { git = "https://github.com/robbert-vdh/nih-plug.git", features = [
    "assert_process_allocs",
] }
nih_plug_vizia = { git = "https://github.com/robbert-vdh/nih-plug.git" }
sofar = "0.2.1"
# Uncomment the below line to disable the on-by-default VST3 feature to remove
# the GPL compatibility requirement
# nih_plug = { git = "https://github.com/robbert-vdh/nih-plug.git", default-features = false, features = ["assert_process_allocs"] }

[profile.release]
lto = "thin"
strip = "symbols"

[profile.profiling]
inherits = "release"
debug = true
strip = "none"
</file>

<file path="README.md">
# Hrtf Conv

## Building

After installing [Rust](https://rustup.rs/), you can compile Hrtf Conv as follows:

```shell
cargo xtask bundle hrtf_conv --release
```
</file>

</files>
